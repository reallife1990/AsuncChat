Задание считаю лишённым логической цепочки:


1. список всех клиентов запрашивать не вижу смысла (
 а именно, т.к. под одним ником может зайти кто угодно
 и откуда угодно при этом не имея никакого способа верификации)
 - поэтому сделал запрос только на находящихся онлайн при входе в чат

2. Хранение логов произведено ввиде хранения информации в txt файлах:
chat-logs/chat_log.txt -  общий чат
chat-logs/{никнейм}.txt -  приватный чат с {никнейм}

3. Задание по хранению на сервере всех сообщений чатов считаю нарушением
 конфидециальности пользователей

4. добавлена отдельная команда %%online%%  для запроса текущего списка
 онлайн-пользователей




Задание 12
1. Продолжить реализацию класса хранилища для серверной стороны.
a) Реализовать функционал работы со списком контактов по протоколу JIM:
Получение списка контактов
Запрос к серверу:

{
"action": "get_contacts",
"time": <unix timestamp>,
"user_login": "login"
}

Положительный ответ сервера будет содержать список контактов:
{
"response": "202",
"alert": "[‘nick_1’, ‘nick_2’,...]"
}
Получение списка контактов — не самая частая операция при взаимодействии с сервером. Она должна выполняться после подключения и авторизации клиента. Инициируется им же. В процессе получения списка контактов клиент не должен инициировать другие запросы.
Добавление/удаление контакта в список контактов
Запрос к серверу:
{
"action": "add_contact" | "del_contact",
"user_id": "nickname",
"time": <unix timestamp>,
"user_login": "login"
}

Ответ сервера будет содержать одно сообщение с кодом результата и необязательной расшифровкой:
{
"response": xxx,
}

b) Реализовать хранение информации в БД на стороне клиента:
* списокконтактов;
* историясообщений.
Реализовать графический интерфейс для мессенджера, используя библиотеку PyQt. Реализовать графический интерфейс администратора сервера:
* отображение списка всех клиентов;
* отображение статистики клиентов;
* настройка сервера (подключение к БД, идентификация).